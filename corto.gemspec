# Generated by jeweler
# DO NOT EDIT THIS FILE DIRECTLY
# Instead, edit Jeweler::Tasks in Rakefile, and run the gemspec command
# -*- encoding: utf-8 -*-

Gem::Specification.new do |s|
  s.name = %q{corto}
  s.version = "0.90.0"

  s.required_rubygems_version = Gem::Requirement.new(">= 0") if s.respond_to? :required_rubygems_version=
  s.authors = ["Paolo Perego"]
  s.date = %q{2011-03-01}
  s.default_executable = %q{corto}
  s.description = %q{CORTO - your url shortner gem
-----------------------------

- Yet another url shortner?
	
	corto is a ruby gem that shorten a URL for you and store the result in a SQLite3 database.
	Why the world needs another url shortener? Well, true to be told I don't know the answer and I'm 
	pretty sure this code is far away from being revolutionary.
	
	However... corto is funniest!

- Usage
	
	Using corto as standalone utility is straightforward. In case you want to shorten an url you just 
	launch the program with the url as parameter.
	
		% bin/corto http://www.armoredcode.com
		% corto: http://www.armoredcode.com shrunk as ji5jnu
	
	Please note that you've to supply a valid URL, since internally it's parsed and rejected anything but
	HTTP and HTTPS verbs.
	
		% bin/corto funnystatementhere
		% corto: it seems funnystatementhere is not a valid url to shrink
	
	If you want to deflate a shrunk url, you have just to specify the '-d' flag this way.
		
		% bin/corto -d ji5jnu
		% corto: ji5jnu deflated is http://www.armoredcode.com

	Super easy, isn't it? Now, go ahead and shrink the web!
	
- API

	A simple corto shortening session start with class initialization, optionally telling which SQLite3 
	database to use and then mastering the parameter.
	
		require 'corto'
		
		...
		corto = Corto.new # we're now saying the gem we want to use it's internal database stored in db/corto.db
		s = corto.shrink('http://www.armoredcode.com')
	
		# s now stores the shrinked url that is already added to database if not present.
		# If you'll pass an invalid url to shrink(), nil will be returned instead
	
	Deflating a URL is super easy as well
	
		# The deflate process is quite straightforward as well
		
		d = corto.deflate(s)
		# d has now the deflated url or nil if that url was not found
	
	You can also count how many urls contained into db
		
		# If you want to know how many urls you have in your database, just call the count() method.
		puts 'Hey, I have stored ' + corto.count() + ' urls'
	
	And finally you can purge your db
		
		# Tired of your database and time for a massive clean has come? Let's purge the db.
		corto.purge
		
		# corto.count == 0 now
		 
	
- Note on Patches/Pull Requests

	* Fork the project.
	* Make your feature addition or bug fix.
	* Add tests for it. This is important so I donâ€™t break it in a future version unintentionally.
	* Commit, do not mess with rakefile, version, or history. (if you want to have your own version, 
		that is fine but bump version in a commit by itself I can ignore when I pull)
	* Send me a pull request. Bonus points for topic branches.

- Copyright
	
	Copyright Â© 2011 Paolo Perego. See LICENSE for details.}
  s.email = %q{thesp0nge@gmail.com}
  s.executables = ["corto"]
  s.extra_rdoc_files = [
    "LICENSE",
     "README"
  ]
  s.files = [
    ".document",
     ".gitignore",
     "LICENSE",
     "README",
     "Rakefile",
     "VERSION",
     "bin/corto",
     "db/corto.db",
     "lib/corto.rb",
     "spec/corto_spec.rb",
     "spec/data/test_db.db",
     "spec/spec.opts",
     "spec/spec_helper.rb"
  ]
  s.homepage = %q{http://github.com/thesp0nge/corto}
  s.rdoc_options = ["--charset=UTF-8"]
  s.require_paths = ["lib"]
  s.rubygems_version = %q{1.3.7}
  s.summary = %q{corto is an url shortenizer gem}
  s.test_files = [
    "spec/corto_spec.rb",
     "spec/spec_helper.rb"
  ]

  if s.respond_to? :specification_version then
    current_version = Gem::Specification::CURRENT_SPECIFICATION_VERSION
    s.specification_version = 3

    if Gem::Version.new(Gem::VERSION) >= Gem::Version.new('1.2.0') then
      s.add_development_dependency(%q<rspec>, [">= 1.2.9"])
      s.add_development_dependency(%q<yard>, [">= 0"])
      s.add_runtime_dependency(%q<sqlite3>, [">= 0"])
      s.add_runtime_dependency(%q<awesome_print>, [">= 0"])
    else
      s.add_dependency(%q<rspec>, [">= 1.2.9"])
      s.add_dependency(%q<yard>, [">= 0"])
      s.add_dependency(%q<sqlite3>, [">= 0"])
      s.add_dependency(%q<awesome_print>, [">= 0"])
    end
  else
    s.add_dependency(%q<rspec>, [">= 1.2.9"])
    s.add_dependency(%q<yard>, [">= 0"])
    s.add_dependency(%q<sqlite3>, [">= 0"])
    s.add_dependency(%q<awesome_print>, [">= 0"])
  end
end

